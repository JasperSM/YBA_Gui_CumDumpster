local Data = {
    ["Thugs"] = {
        ["NPC"] = "Officer Sam";
        ["Option"] = "Option1";
        ["Dialogue"] = "Dialogue2";
    };
    ["Corrupt Cops"] = {
        ["NPC"] = "Deputy Bertrude";
        ["Option"] = "Option1";
        ["Dialogue"] = "Dialogue5";
    };
    ["Zombies"] = {
        ["NPC"] = "Dracula";
        ["Option"] = "Option1";
        ["Dialogue"] = "Dialogue4";
    };
    ["Vampire"] = {
        ["NPC"] = "Zeppelin";
        ["Option"] = "Option1";
        ["Dialogue"] = "Dialogue4";
    };
    ["Dio"] = {
        ["NPC"] = "Dopey";
        ["Option"] = "Option1";
        ["Dialogue"] = "Dialogue3";
    };
};
local DataNames = {};
for i,v in pairs(Data) do
    DataNames[#DataNames+1] = i;
end;

local Hats = game:GetService("ReplicatedStorage").Cosmetics;
local HatNames = {};
for i,v in pairs(Hats:GetChildren()) do
    HatNames[#HatNames+1] = v.Name;
end;

local CurrentQuest = "Zombies";
if _G.ESP ~= true then
    _G.ESP = false;
end;
local SelectedHat = "Joe v1";
local LagSwitch = false;
local LagAmount = 0;
local Settings = settings();
local Ply = game.Players.LocalPlayer;
local Char = Ply.Character
local Remote = Ply.Character.RemoteEvent;
local Humanoid = Ply.Character.Humanoid;
local WalkAmount = 32;
local WalkConnection;
local JumpAmount = 50;
local JumpConnection;

Ply.CharacterAdded:Connect(function(Character)
    Char = Character;
    Remote = Character:WaitForChild("RemoteEvent");
    Humanoid = Character:WaitForChild("Humanoid");
end);

function ItemEsp()
    local items = workspace["Item_Spawns"].Items;

    local itemNames = {
        ["Rokaka"] = "rbxassetid://3497428510",
        ["Stand Arrow"] = "rbxassetid://4496695972",
        ["Coin"] = "rbxassetid://3583727108",
        ["Diamond"] = "rbxassetid://511706016",
        ["Stone Mask"] = "rbxassetid://4551120971",
        ["Ribs"] = "rbxassetid://5249254947"
    };
    
    function findName(v)
        if not v:IsA("MeshPart") then return "Unkown"; end;
            local partMesh = v.MeshId;
            local name = "Unkown";
            for i,n in pairs(itemNames)do
                if n == partMesh then
                    name = i;
                    if v.Material == Enum.Material.ForceField then
                        name = "Pure Rokaka";
                        game.StarterGui:SetCore("SendNotification",{
                            Title = "Pure Rokaka";
                            Text = "Spawned";
                        });
                    end;
                end;
            end;
            game.StarterGui:SetCore("SendNotification",{
               Title = name;
               Text = "Spawned";
            });
        return name;
    end;
    
    function addBoard(v)
        if v:IsA("ClickDetector") then 
            print(v);
            local bb = Instance.new("BillboardGui");
            bb.Parent = v.Parent:FindFirstChildOfClass("Part") or v.Parent:FindFirstChildOfClass("MeshPart");
            bb.AlwaysOnTop = true;
            bb.Size = UDim2.new(1,0,1,0);
            local frame = Instance.new("TextLabel");
            frame.Parent = bb;
            frame.Size = UDim2.new(0,25,0,25);
            frame.Text = findName(bb.Parent);
            frame.BackgroundTransparency = 1;
            frame.TextColor3 = Color3.new(1,1,1);
        end 
    end
    
    for i,v in pairs(items:GetDescendants()) do
        addBoard(v);
    end;
    
    items.DescendantAdded:Connect(function(v)
        addBoard(v);
    end);
    
    game.StarterGui:SetCore("SendNotification",{
       Title = "Loading...";
       Text = "Finished";
    });
end;

local library = loadstring(game:HttpGetAsync('https://pastebin.com/raw/edJT9EGX'))();
local window = library:CreateWindow("Cum Dumpster");

window:AddList({
    text = "Quest";
    values = DataNames;
    callback = function(a)
        CurrentQuest = a;
    end;
});
window:AddButton({
    text = "Get Quest";
    callback = function()
        Remote:FireServer("EndDialogue",Data[CurrentQuest]);
    end;
});
window:AddButton({
    text = "Item ESP";
    callback = function()
        if _G.ESP then return end;
        _G.ESP = true;
        ItemEsp();
    end;
});
window:AddSlider({
    text = "Lag Amount";
    min = 0;
    max = 100;
    float = 0.1;
    callback = function(a)
        LagAmount = a;
        Settings.Network.IncomingReplicationLag = LagSwitch and LagAmount or 0;
    end;
});
window:AddToggle({
    text = "Lag Switch";
    callback = function(a)
        LagSwitch = a;
        print(a and LagAmount or 0);
        Settings.Network.IncomingReplicationLag = a and LagAmount or 0;
    end;
});
window:AddList({
    text = "Hats";
    values = HatNames;
    callback = function(a)
       SelectedHat = a; 
    end;
});
window:AddButton({
    text = "Pick Hat";
    callback = function()
        Remote:FireServer("EquipCosmetic",SelectedHat);
    end;
});
window:AddButton({
    text = "Drop Hats";
    callback = function()
        for i,v in pairs(Char:GetChildren())do
            if v:IsA("Accessory")then
                v.Parent = game.Workspace;
            end
        end;
    end;
});
window:AddSlider({
    text = "Walk Speed";
    min = 0;
    max = 400;
    float = 1;
    value = 32;
    callback = function(a)
        WalkAmount = a;
    end;
});
window:AddToggle({
    text = "Walk Toggle";
    callback = function(a)
        if a then
            Humanoid.WalkSpeed = WalkAmount;
            WalkConnection = Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                Humanoid.WalkSpeed = WalkAmount;
            end);
            Humanoid.WalkSpeed = WalkAmount;
        elseif WalkConnection ~= nil then
            Humanoid.WalkSpeed = 20;
            WalkConnection:Disconnect();
        end;
    end;
});
window:AddSlider({
    text = "Jump Height";
    min = 0;
    max = 500;
    float = 1;
    value = 50;
    callback = function(a)
        JumpAmount = a;
        if JumpConnection ~= nil then
            Humanoid.JumpPower = JumpAmount;
        end;
    end;
});
window:AddToggle({
    text = "Jump Toggle";
    callback = function(a)
        if a then
            Humanoid.JumpPower = JumpAmount;
            JumpConnection = Humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
                Humanoid.JumpPower = JumpAmount;
            end);
            Humanoid.JumpPower = JumpAmount;
        elseif JumpConnection ~= nil then
            Humanoid.JumpPower = 50;
            JumpConnection:Disconnect();
        end;
    end;
});
local PlayerList = {};
for i,v in pairs(game:GetService("Players"):GetPlayers())do
    PlayerList[#PlayerList+1] = v.Name;
end ;
window:AddList({
    text = "2v2 Players";
    values = PlayerList;
    callback = function(a)
        Remote:FireServer("Match2v2",a);
    end;
});
window:AddButton({
    text = "1v1";
    callback = function(a)
        Remote:FireServer("JoinOneVersusOne")
    end;
});
window:AddButton({
    text = "[COMPETITIVE] Metal Ball";
    callback = function(a)
        local table_1 = {
            ["Dialogue"] = 'Dialogue2',
            ["NPC"] = '[COMPETITIVE] Metal Ball Run',
            ["Option"] = 'Option1'
        };
        Remote:FireServer("EndDialogue",table_1);
    end;
});
window:AddButton({
    text = "[CASUAL] Metal Ball";
    callback = function(a)
        local table_1 = {
            ["Dialogue"] = 'Dialogue2',
            ["NPC"] = 'Metal Ball Run',
            ["Option"] = 'Option1'
        };
        Remote:FireServer("EndDialogue",table_1)
    end;
});

window:AddButton({
    text = "Destroy GUI";
    callback = function()
        warn("Destroying GUI");
        if WalkConnection ~= nil then
            WalkConnection:Disconnect()
        end;
        if JumpConnection ~= nil then
            JumpConnection:Disconnect()
        end;
        library:Close();
    end;
});
window:AddLabel({
    text = "Dom has no testicles";
});
library:Init();
